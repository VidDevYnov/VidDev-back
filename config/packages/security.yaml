security:
    enable_authenticator_manager: true

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:

        dev:
            pattern: ^/((profiler|wdt)|css|images|js)/
            security: false

        api:
            pattern:   ^/api
            stateless: true
            entry_point: jwt
            json_login:
                check_path: /api/login
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            jwt: ~
            refresh_jwt:
                check_path: /api/token/refresh # or, you may use the `api_refresh_token` route name

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/users, roles: ROLE_USER, methods: [PUT,PATCH,DELETE] }
        - { path: ^/api/profil, roles: ROLE_USER, methods: [GET] }
        - { path: ^/api/addresses, roles: ROLE_USER, methods: [POST,PUT,PATCH,DELETE] }
        - { path: ^/api/article_categories, roles: ROLE_ADMIN, methods: [POST,PUT,PATCH,DELETE] }
        - { path: ^/api/article_materials, roles: ROLE_ADMIN, methods: [POST,PUT,PATCH,DELETE] }
        - { path: ^/api/article_sizes, roles: ROLE_ADMIN, methods: [POST,PUT,PATCH,DELETE] }
        - { path: ^/api/article_states, roles: ROLE_ADMIN, methods: [POST,PUT,PATCH,DELETE] }
        - { path: ^/api/article_types, roles: ROLE_ADMIN, methods: [POST,PUT,PATCH,DELETE] }
        - { path: ^/api/articles, roles: ROLE_USER, methods: [POST,PUT,PATCH,DELETE] }
        - { path: ^/api/images, roles: ROLE_USER, methods: [POST,PUT,PATCH,DELETE] }
        - { path: ^/api/orders, roles: ROLE_USER, methods: [GET,POST,PUT,PATCH,DELETE] }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
